$column-width: 60px;
$gutter-width: 20px;
$columns: 12;

@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}

html, body, #s4-bodyContainer {
    margin: 0px auto;
    width: 100%;
    min-width: 320px;
}

$total-width: 100%;

@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

.clear { @include clearfix() };


@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	margin-left: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
    margin-right: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	@include clearfix();
}

@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
	margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
	margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin prefix($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin suffix($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin push($offset:1) {
    position: relative;
	left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns));
}

@mixin pull($offset:1) {
    position: relative;
	right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns));
}